var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Global = xdc.useModule('ti.ndk.config.Global');
var Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
var Settings = xdc.useModule('ti.csl.Settings');
var ti_drv_pa_Settings = xdc.useModule('ti.drv.pa.Settings');
var ti_drv_cppi_Settings = xdc.useModule('ti.drv.cppi.Settings');
var ti_drv_qmss_Settings = xdc.useModule('ti.drv.qmss.Settings');
var ti_platform_evmc6678l_Settings = xdc.useModule('ti.platform.evmc6678l.Settings');
var ti_transport_ndk_Settings = xdc.useModule('ti.transport.ndk.Settings');
var Ip = xdc.useModule('ti.ndk.config.Ip');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Startup = xdc.useModule('xdc.runtime.Startup');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var DEV = xdc.useModule('ti.sysbios.io.DEV');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Tcp = xdc.useModule('ti.ndk.config.Tcp');

Startup.firstFxns.$add('&myfirstfunc'); 
Startup.lastFxns.$add('&mylastfunc'); 
/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* System stack size (used by ISRs and Swis) */
Program.stack = 8192;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;
Global.IPv6 = false;
Ip.autoIp = false;
Ip.address = "192.168.2.11";
Ip.mask = "255.255.255.0";
Ip.socketTimeToLive = 64;
Memory.defaultHeapSize = 0x40000;
Global.networkOpenHook = "&NetworkOpenHookFunc";
Global.networkCloseHook = "&NetworkCloseHookFunc";


var Ecm = xdc.useModule ('ti.sysbios.family.c64p.EventCombiner'); 
Ecm.eventGroupHwiNum[0] = 7;
Ecm.eventGroupHwiNum[1] = 8;
Ecm.eventGroupHwiNum[2] = 9;
Ecm.eventGroupHwiNum[3] = 10;
Ip.enableForwarding = false;
Ip.gatewayIpAddr = "192.168.2.1";
Ip.enableDirectedBroadcast = false;
Ip.ifIdx = 1;
Ip.enableFiltering = false;

Program.sectMap["sharedL2"] = "MSMCSRAM"; 
Program.sectMap["systemHeap"] = "DDR3";
Program.sectMap[".sysmem"]  = "MSMCSRAM";
Program.sectMap[".args"]    = "MSMCSRAM";
Program.sectMap[".cio"]     = "MSMCSRAM";
Program.sectMap[".far"] 	= 	"MSMCSRAM";
Program.sectMap[".rodata"] 	= 	"MSMCSRAM";
Program.sectMap[".neardata"]= 	"MSMCSRAM";
Program.sectMap[".cppi"] 	= 	"MSMCSRAM";
Program.sectMap[".init_array"] 	= 	"MSMCSRAM";
Program.sectMap[".qmss"] 	= 	"MSMCSRAM";
Program.sectMap[".cinit"] 	= 	"MSMCSRAM";
Program.sectMap[".bss"]		=	"MSMCSRAM";
Program.sectMap[".const"]	=	"MSMCSRAM";
Program.sectMap[".text"]	=	"MSMCSRAM";
Program.sectMap[".code"]	=	"MSMCSRAM";
Program.sectMap[".switch"]	=	"MSMCSRAM";
Program.sectMap[".data"]	=	"MSMCSRAM";
Program.sectMap[".fardata"] = 	"MSMCSRAM";
Program.sectMap[".args"] 	= 	"MSMCSRAM";
Program.sectMap[".cio"] 	= 	"MSMCSRAM";
Program.sectMap[".vecs"] 	= 	"MSMCSRAM";
Program.sectMap["platform_lib"] 	= 	"MSMCSRAM";
Program.sectMap[".DbgSection"]  = "MSMCSRAM";
Program.sectMap[".far:taskStackSection"] = "L2SRAM";
Program.sectMap[".stack"]	=	"L2SRAM";
Program.sectMap[".nimu_eth_ll2"] = "L2SRAM";
Program.sectMap[".resmgr_memregion"] = {loadSegment: "L2SRAM", loadAlign:128};	/* QMSS descriptors region 	*/
Program.sectMap[".resmgr_handles"] = {loadSegment: "L2SRAM", loadAlign:16};	/* CPPI/QMSS/PA Handles			*/
Program.sectMap[".resmgr_pa"]	= {loadSegment: "L2SRAM", loadAlign:8};		/* PA Memory					*/
Program.sectMap[".far:IMAGEDATA"] = {loadSegment: "L2SRAM", loadAlign: 8};
Program.sectMap[".far:NDK_OBJMEM"] = {loadSegment: "MSMCSRAM", loadAlign: 8};
Program.sectMap[".far:NDK_PACKETMEM"] = {loadSegment: "MSMCSRAM", loadAlign: 128};
var heapMem0Params = new HeapMem.Params();
heapMem0Params.instance.name = "heapMem0";
heapMem0Params.sectionName = "systemHeap";
heapMem0Params.size = 3145728;
Program.global.heapMem0 = HeapMem.create(heapMem0Params);
var task0Params = new Task.Params();
task0Params.instance.name = "hNetRecvTask";
task0Params.priority = -1;
task0Params.stackSize = 2048;
Program.global.hNetRecvTask = Task.create("&NetworkRecv", task0Params);
Task.numPriorities = 32;
var task2Params = new Task.Params();
task2Params.instance.name = "hSigProcTask";
task2Params.priority = 25;
task2Params.stackSize = 8192;
Program.global.hSigProcTask = Task.create("&SignalProcess", task2Params);
var task3Params = new Task.Params();
task3Params.instance.name = "hHostCmdRespTask";
task3Params.priority = 26;
task3Params.stackSize = 4096;
Program.global.hHostCmdRespTask = Task.create("&HostCmdResponse", task3Params);
var mailbox0Params = new Mailbox.Params();
mailbox0Params.instance.name = "hHostCmdResponseMail";
Program.global.hHostCmdResponseMail = Mailbox.create(8, 10, mailbox0Params);
var mailbox1Params = new Mailbox.Params();
mailbox1Params.instance.name = "hNetSendMail";
Program.global.hNetSendMail = Mailbox.create(8, 10, mailbox1Params);
var mailbox2Params = new Mailbox.Params();
mailbox2Params.instance.name = "hProcBufMail";
Program.global.hProcBufMail = Mailbox.create(4, 10, mailbox2Params);
/*
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hSRIORecvHwi";
Program.global.hSRIORecvHwi = Hwi.create(5, "&SRIORecvHwi", hwi0Params);
*/
Global.kernTaskPriLevel = 30;
Global.highTaskPriLevel = 22;
Global.normTaskPriLevel = 15;
Global.pktSizeFrameBuf = 1536;
Global.pktNumFrameBufs = 192;
Global.memRawPageSize = 3072;
Global.memRawPageCount = 16;
Tcp.transmitBufSize = 10240;
Tcp.receiveBufSize = 10240;
Tcp.receiveBufLimit = 10240;
Global.lowTaskStackSize = 5120;
Global.highTaskStackSize = 8192;
Global.normTaskStackSize = 7168;
Global.ndkThreadStackSize = 10240;
Task.defaultStackSize = 4096;
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi0";
hwi0Params.eventId = 20;
hwi0Params.priority = 35;
Program.global.hwi0 = Hwi.create(4, "&SrioDoorBell_Isr_handler", hwi0Params);
var mailbox3Params = new Mailbox.Params();
mailbox3Params.instance.name = "hUpLoadDataMail";
Program.global.hUpLoadDataMail = Mailbox.create(16, 5, mailbox3Params);
Global.netSchedulerPri = Global.NC_PRIORITY_HIGH;
Hwi.checkStackFlag = false;
Startup.resetFxn = "&resetfunc";
var task3Params0 = new Task.Params();
task3Params0.instance.name = "hNetworkSendTask";
task3Params0.priority = -1;
task3Params0.stackSize = 2048;
Program.global.hNetworkSendTask = Task.create("&NetworkSend", task3Params0);
