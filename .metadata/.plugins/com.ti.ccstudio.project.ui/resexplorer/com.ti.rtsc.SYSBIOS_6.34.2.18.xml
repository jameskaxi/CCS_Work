<?xml version="1.0" encoding="UTF-8"?>

<resource.explorer version="1.0" name="SYS/BIOS" dir="" href="http://processors.wiki.ti.com">



	<content name="Release Notes" href="E:/ti/bios_6_34_02_18/Bios_6_34_02_18_release_notes.html">
		<type>weblink</type>
	</content>
	<content name="Getting Started Guide" href="E:/ti/bios_6_34_02_18/docs/Bios_Getting_Started_Guide.pdf">
		<type>weblink</type>
	</content>
	<content name="Users Guide" href="E:/ti/bios_6_34_02_18/docs/Bios_User_Guide.pdf">
		<type>weblink</type>
	</content>
	<content name="Legacy Applications note" href="E:/ti/bios_6_34_02_18/docs/Bios_Legacy_App_Note.pdf">
		<type>weblink</type>
	</content>
	<filter id="filter_family_TMS470">
		<devices><device>ARM</device></devices>
	</filter>
	<contents name="ARM" desc="ARM" icon="plugin://icons/obj16/devices.png">
		<filter.ref ref.id="filter_family_TMS470"/>
		<contents name="C6-Integra C6A81xx" desc="C6-Integra C6A81xx" icon="plugin://icons/obj16/devices.png">
			<contents name="C6A8167" desc="C6A8167" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="C6A8168" desc="C6A8168" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C66xx Multicore DSP" desc="C66xx Multicore DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="TCI6614" desc="TCI6614" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="OMAP-L1x" desc="OMAP-L1x" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMOMAPL137" desc="EVMOMAPL137" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMOMAPL138" desc="EVMOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EXPKITOMAPL138" desc="EXPKITOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="LCDKOMAPL138" desc="LCDKOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL132" desc="OMAPL132" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL137" desc="OMAPL137" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL138" desc="OMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
	</contents>
	<filter id="filter_family_C6000">
		<devices><device>C6000</device></devices>
	</filter>
	<contents name="C6000" desc="C6000" icon="plugin://icons/obj16/devices.png">
		<filter.ref ref.id="filter_family_C6000"/>
		<contents name="Generic devices" desc="Generic devices" icon="plugin://icons/obj16/devices.png">
			<contents name="Generic C64x+ Device" desc="Generic C64x+ Device" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="Generic C66xx Device" desc="Generic C66xx Device" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="Generic C674x Device" desc="Generic C674x Device" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C6-Integra C6A81xx" desc="C6-Integra C6A81xx" icon="plugin://icons/obj16/devices.png">
			<contents name="C6A8167" desc="C6A8167" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="C6A8168" desc="C6A8168" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C645x High Performance DSP" desc="C645x High Performance DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="DSK6455" desc="DSK6455" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVM6455 (TMS320C6455)" desc="EVM6455 (TMS320C6455)" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMC6457 (TMS320C6457)" desc="EVMC6457 (TMS320C6457)" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMDSEVM6457L" desc="TMDSEVM6457L" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6452" desc="TMS320C6452" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6454" desc="TMS320C6454" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6455" desc="TMS320C6455" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6457" desc="TMS320C6457" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C64xx Multicore DSP" desc="C64xx Multicore DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMC6472" desc="EVMC6472" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMDSEVM6474L" desc="TMDSEVM6474L" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6472" desc="TMS320C6472" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6474" desc="TMS320C6474" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320TCI6486" desc="TMS320TCI6486" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320TCI6487" desc="TMS320TCI6487" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320TCI6488" desc="TMS320TCI6488" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C66xx Multicore DSP" desc="C66xx Multicore DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="TCI6614" desc="TCI6614" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6657" desc="TMS320C6657" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C674x Floating-point DSP" desc="C674x Floating-point DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMC6747" desc="EVMC6747" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMC6748" desc="EVMC6748" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="LCDKC6748" desc="LCDKC6748" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6742" desc="TMS320C6742" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6743" desc="TMS320C6743" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6745" desc="TMS320C6745" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6746" desc="TMS320C6746" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6747" desc="TMS320C6747" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6748" desc="TMS320C6748" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="OMAP-L1x" desc="OMAP-L1x" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMOMAPL137" desc="EVMOMAPL137" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMOMAPL138" desc="EVMOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EXPKITOMAPL138" desc="EXPKITOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="LCDKOMAPL138" desc="LCDKOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL132" desc="OMAPL132" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL137" desc="OMAPL137" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL138" desc="OMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="TCI High Performance DSP" desc="TCI High Performance DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="DSKTCI6482" desc="DSKTCI6482" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMTCI6482 (TMS320TCI6482)" desc="EVMTCI6482 (TMS320TCI6482)" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320TCI6482" desc="TMS320TCI6482" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320TCI6484" desc="TMS320TCI6484" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="TMS320C64XX" desc="TMS320C64XX" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMC6424" desc="EVMC6424" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMC6474" desc="EVMC6474" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMTCI6488" desc="EVMTCI6488" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6421" desc="TMS320C6421" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6424" desc="TMS320C6424" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="E:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
	</contents>

</resource.explorer>
